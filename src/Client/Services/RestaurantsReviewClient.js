/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var RestaurantsReview;
(function (RestaurantsReview) {
    var ApiClient;
    (function (ApiClient) {
        class RestaurantsReviewClient {
            constructor(baseUrl, http) {
                this.jsonParseReviver = undefined;
                this.http = http ? http : window;
                this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
            }
            RegisterUser(firstName, lastName, email, username, password) {
                let url_ = this.baseUrl + "/api/RegisterUser?";
                if (firstName === undefined)
                    throw new Error("The parameter 'firstName' must be defined.");
                else if (firstName !== null)
                    url_ += "firstName=" + encodeURIComponent("" + firstName) + "&";
                if (lastName === undefined)
                    throw new Error("The parameter 'lastName' must be defined.");
                else if (lastName !== null)
                    url_ += "lastName=" + encodeURIComponent("" + lastName) + "&";
                if (email === undefined)
                    throw new Error("The parameter 'email' must be defined.");
                else if (email !== null)
                    url_ += "email=" + encodeURIComponent("" + email) + "&";
                if (username === undefined)
                    throw new Error("The parameter 'username' must be defined.");
                else if (username !== null)
                    url_ += "username=" + encodeURIComponent("" + username) + "&";
                if (password === undefined)
                    throw new Error("The parameter 'password' must be defined.");
                else if (password !== null)
                    url_ += "password=" + encodeURIComponent("" + password) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "POST",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processRegisterUser(_response);
                });
            }
            processRegisterUser(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? MessageItem.fromJS(resultData200) : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            LoginUser(username, password) {
                let url_ = this.baseUrl + "/api/LoginUser?";
                if (username === undefined)
                    throw new Error("The parameter 'username' must be defined.");
                else if (username !== null)
                    url_ += "username=" + encodeURIComponent("" + username) + "&";
                if (password === undefined)
                    throw new Error("The parameter 'password' must be defined.");
                else if (password !== null)
                    url_ += "password=" + encodeURIComponent("" + password) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "POST",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processLoginUser(_response);
                });
            }
            processLoginUser(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? LoginUserResult.fromJS(resultData200) : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            GetCurrentUserPermissions() {
                let url_ = this.baseUrl + "/api/GetCurrentUserPermissions";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "POST",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processGetCurrentUserPermissions(_response);
                });
            }
            processGetCurrentUserPermissions(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        if (Array.isArray(resultData200)) {
                            result200 = [];
                            for (let item of resultData200)
                                result200.push(tblRole.fromJS(item));
                        }
                        else {
                            result200 = null;
                        }
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            GetRoles() {
                let url_ = this.baseUrl + "/api/GetRoles";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processGetRoles(_response);
                });
            }
            processGetRoles(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        if (Array.isArray(resultData200)) {
                            result200 = [];
                            for (let item of resultData200)
                                result200.push(tblRole.fromJS(item));
                        }
                        else {
                            result200 = null;
                        }
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            GetRole(roleId) {
                let url_ = this.baseUrl + "/api/GetRoleAsync?";
                if (roleId === undefined || roleId === null)
                    throw new Error("The parameter 'roleId' must be defined and cannot be null.");
                else
                    url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processGetRole(_response);
                });
            }
            processGetRole(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? tblRole.fromJS(resultData200) : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            SaveRole(roleJson) {
                let url_ = this.baseUrl + "/api/SaveRoleAsync?";
                if (roleJson === undefined)
                    throw new Error("The parameter 'roleJson' must be defined.");
                else if (roleJson !== null)
                    url_ += "roleJson=" + encodeURIComponent("" + roleJson) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processSaveRole(_response);
                });
            }
            processSaveRole(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            DeleteRole(roleId) {
                let url_ = this.baseUrl + "/api/DeleteRoleAsync?";
                if (roleId === undefined || roleId === null)
                    throw new Error("The parameter 'roleId' must be defined and cannot be null.");
                else
                    url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processDeleteRole(_response);
                });
            }
            processDeleteRole(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            GetMembersWithRoles(sortDesc, skip, take) {
                let url_ = this.baseUrl + "/api/GetMembersWithRoles?";
                if (sortDesc === null)
                    throw new Error("The parameter 'sortDesc' cannot be null.");
                else if (sortDesc !== undefined)
                    url_ += "sortDesc=" + encodeURIComponent("" + sortDesc) + "&";
                if (skip === null)
                    throw new Error("The parameter 'skip' cannot be null.");
                else if (skip !== undefined)
                    url_ += "skip=" + encodeURIComponent("" + skip) + "&";
                if (take === null)
                    throw new Error("The parameter 'take' cannot be null.");
                else if (take !== undefined)
                    url_ += "take=" + encodeURIComponent("" + take) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processGetMembersWithRoles(_response);
                });
            }
            processGetMembersWithRoles(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        if (Array.isArray(resultData200)) {
                            result200 = [];
                            for (let item of resultData200)
                                result200.push(MembersResult.fromJS(item));
                        }
                        else {
                            result200 = null;
                        }
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            GetMemberDetails(memberId) {
                let url_ = this.baseUrl + "/api/GetMemberDetails?";
                if (memberId === undefined || memberId === null)
                    throw new Error("The parameter 'memberId' must be defined and cannot be null.");
                else
                    url_ += "memberId=" + encodeURIComponent("" + memberId) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processGetMemberDetails(_response);
                });
            }
            processGetMemberDetails(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? MembersResult.fromJS(resultData200) : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            DeleteMember(memberId) {
                let url_ = this.baseUrl + "/api/DeleteMember?";
                if (memberId === undefined || memberId === null)
                    throw new Error("The parameter 'memberId' must be defined and cannot be null.");
                else
                    url_ += "memberId=" + encodeURIComponent("" + memberId) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processDeleteMember(_response);
                });
            }
            processDeleteMember(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            SaveMemberRoles(memberId, assignedRolesCsv) {
                let url_ = this.baseUrl + "/api/SaveMemberRoles?";
                if (memberId === undefined || memberId === null)
                    throw new Error("The parameter 'memberId' must be defined and cannot be null.");
                else
                    url_ += "memberId=" + encodeURIComponent("" + memberId) + "&";
                if (assignedRolesCsv === undefined)
                    throw new Error("The parameter 'assignedRolesCsv' must be defined.");
                else if (assignedRolesCsv !== null)
                    url_ += "assignedRolesCsv=" + encodeURIComponent("" + assignedRolesCsv) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processSaveMemberRoles(_response);
                });
            }
            processSaveMemberRoles(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            CreateNewRestaurant(restaurantName, restaurantAddress, restaurantDescription) {
                let url_ = this.baseUrl + "/api/CreateNewRestaurant?";
                if (restaurantName === undefined)
                    throw new Error("The parameter 'restaurantName' must be defined.");
                else if (restaurantName !== null)
                    url_ += "restaurantName=" + encodeURIComponent("" + restaurantName) + "&";
                if (restaurantAddress === undefined)
                    throw new Error("The parameter 'restaurantAddress' must be defined.");
                else if (restaurantAddress !== null)
                    url_ += "restaurantAddress=" + encodeURIComponent("" + restaurantAddress) + "&";
                if (restaurantDescription === undefined)
                    throw new Error("The parameter 'restaurantDescription' must be defined.");
                else if (restaurantDescription !== null)
                    url_ += "restaurantDescription=" + encodeURIComponent("" + restaurantDescription) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processCreateNewRestaurant(_response);
                });
            }
            processCreateNewRestaurant(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            SaveRestaurant(restaurantId, restaurantName, restaurantAddress, restaurantDescription) {
                let url_ = this.baseUrl + "/api/SaveRestaurant?";
                if (restaurantId === undefined || restaurantId === null)
                    throw new Error("The parameter 'restaurantId' must be defined and cannot be null.");
                else
                    url_ += "restaurantId=" + encodeURIComponent("" + restaurantId) + "&";
                if (restaurantName === undefined)
                    throw new Error("The parameter 'restaurantName' must be defined.");
                else if (restaurantName !== null)
                    url_ += "restaurantName=" + encodeURIComponent("" + restaurantName) + "&";
                if (restaurantAddress === undefined)
                    throw new Error("The parameter 'restaurantAddress' must be defined.");
                else if (restaurantAddress !== null)
                    url_ += "restaurantAddress=" + encodeURIComponent("" + restaurantAddress) + "&";
                if (restaurantDescription === undefined)
                    throw new Error("The parameter 'restaurantDescription' must be defined.");
                else if (restaurantDescription !== null)
                    url_ += "restaurantDescription=" + encodeURIComponent("" + restaurantDescription) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processSaveRestaurant(_response);
                });
            }
            processSaveRestaurant(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            DeleteRestaurant(restaurantId) {
                let url_ = this.baseUrl + "/api/DeleteRestaurant?";
                if (restaurantId === undefined || restaurantId === null)
                    throw new Error("The parameter 'restaurantId' must be defined and cannot be null.");
                else
                    url_ += "restaurantId=" + encodeURIComponent("" + restaurantId) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processDeleteRestaurant(_response);
                });
            }
            processDeleteRestaurant(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            GetSingleRestaurant(restaurantId) {
                let url_ = this.baseUrl + "/api/GetSingleRestaurant?";
                if (restaurantId === undefined || restaurantId === null)
                    throw new Error("The parameter 'restaurantId' must be defined and cannot be null.");
                else
                    url_ += "restaurantId=" + encodeURIComponent("" + restaurantId) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processGetSingleRestaurant(_response);
                });
            }
            processGetSingleRestaurant(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 ? RestaurantExtendedResult.fromJS(resultData200) : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            GetRestaurants(skip, take) {
                let url_ = this.baseUrl + "/api/GetRestaurants?";
                if (skip === null)
                    throw new Error("The parameter 'skip' cannot be null.");
                else if (skip !== undefined)
                    url_ += "skip=" + encodeURIComponent("" + skip) + "&";
                if (take === null)
                    throw new Error("The parameter 'take' cannot be null.");
                else if (take !== undefined)
                    url_ += "take=" + encodeURIComponent("" + take) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processGetRestaurants(_response);
                });
            }
            processGetRestaurants(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        if (Array.isArray(resultData200)) {
                            result200 = [];
                            for (let item of resultData200)
                                result200.push(RestaurantExtendedResult.fromJS(item));
                        }
                        else {
                            result200 = null;
                        }
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            AddRestaurantReview(restaurantId, rating, comment) {
                let url_ = this.baseUrl + "/api/AddRestaurantReview?";
                if (restaurantId === undefined || restaurantId === null)
                    throw new Error("The parameter 'restaurantId' must be defined and cannot be null.");
                else
                    url_ += "restaurantId=" + encodeURIComponent("" + restaurantId) + "&";
                if (rating === undefined)
                    throw new Error("The parameter 'rating' must be defined.");
                else if (rating !== null)
                    url_ += "rating=" + encodeURIComponent("" + rating) + "&";
                if (comment === undefined)
                    throw new Error("The parameter 'comment' must be defined.");
                else if (comment !== null)
                    url_ += "comment=" + encodeURIComponent("" + comment) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processAddRestaurantReview(_response);
                });
            }
            processAddRestaurantReview(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            UpdateRestaurantReview(reviewId, rating, comment) {
                let url_ = this.baseUrl + "/api/UpdateRestaurantReview?";
                if (reviewId === undefined || reviewId === null)
                    throw new Error("The parameter 'reviewId' must be defined and cannot be null.");
                else
                    url_ += "reviewId=" + encodeURIComponent("" + reviewId) + "&";
                if (rating === undefined)
                    throw new Error("The parameter 'rating' must be defined.");
                else if (rating !== null)
                    url_ += "rating=" + encodeURIComponent("" + rating) + "&";
                if (comment === undefined)
                    throw new Error("The parameter 'comment' must be defined.");
                else if (comment !== null)
                    url_ += "comment=" + encodeURIComponent("" + comment) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processUpdateRestaurantReview(_response);
                });
            }
            processUpdateRestaurantReview(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            DeleteRestaurantReview(reviewId) {
                let url_ = this.baseUrl + "/api/DeleteRestaurantReview?";
                if (reviewId === undefined || reviewId === null)
                    throw new Error("The parameter 'reviewId' must be defined and cannot be null.");
                else
                    url_ += "reviewId=" + encodeURIComponent("" + reviewId) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processDeleteRestaurantReview(_response);
                });
            }
            processDeleteRestaurantReview(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            GetRestaurantReviews(restaurantId) {
                let url_ = this.baseUrl + "/api/GetRestaurantReviews?";
                if (restaurantId === undefined || restaurantId === null)
                    throw new Error("The parameter 'restaurantId' must be defined and cannot be null.");
                else
                    url_ += "restaurantId=" + encodeURIComponent("" + restaurantId) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processGetRestaurantReviews(_response);
                });
            }
            processGetRestaurantReviews(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        if (Array.isArray(resultData200)) {
                            result200 = [];
                            for (let item of resultData200)
                                result200.push(ReviewExtended.fromJS(item));
                        }
                        else {
                            result200 = null;
                        }
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            AddReviewReply(reviewId, replyText) {
                let url_ = this.baseUrl + "/api/AddReviewReply?";
                if (reviewId === undefined || reviewId === null)
                    throw new Error("The parameter 'reviewId' must be defined and cannot be null.");
                else
                    url_ += "reviewId=" + encodeURIComponent("" + reviewId) + "&";
                if (replyText === undefined)
                    throw new Error("The parameter 'replyText' must be defined.");
                else if (replyText !== null)
                    url_ += "replyText=" + encodeURIComponent("" + replyText) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processAddReviewReply(_response);
                });
            }
            processAddReviewReply(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            UpdateReviewReply(reviewId, replyText) {
                let url_ = this.baseUrl + "/api/UpdateReviewReply?";
                if (reviewId === undefined || reviewId === null)
                    throw new Error("The parameter 'reviewId' must be defined and cannot be null.");
                else
                    url_ += "reviewId=" + encodeURIComponent("" + reviewId) + "&";
                if (replyText === undefined)
                    throw new Error("The parameter 'replyText' must be defined.");
                else if (replyText !== null)
                    url_ += "replyText=" + encodeURIComponent("" + replyText) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processUpdateReviewReply(_response);
                });
            }
            processUpdateReviewReply(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
            DeleteReviewReply(reviewId) {
                let url_ = this.baseUrl + "/api/DeleteReviewReply?";
                if (reviewId === undefined || reviewId === null)
                    throw new Error("The parameter 'reviewId' must be defined and cannot be null.");
                else
                    url_ += "reviewId=" + encodeURIComponent("" + reviewId) + "&";
                url_ = url_.replace(/[?&]$/, "");
                let options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                };
                return this.http.fetch(url_, options_).then((_response) => {
                    return this.processDeleteReviewReply(_response);
                });
            }
            processDeleteReviewReply(response) {
                const status = response.status;
                let _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach((v, k) => _headers[k] = v);
                }
                ;
                if (status === 200) {
                    return response.text().then((_responseText) => {
                        let result200 = null;
                        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                        result200 = resultData200 !== undefined ? resultData200 : null;
                        return result200;
                    });
                }
                else if (status !== 200 && status !== 204) {
                    return response.text().then((_responseText) => {
                        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                    });
                }
                return Promise.resolve(null);
            }
        }
        ApiClient.RestaurantsReviewClient = RestaurantsReviewClient;
        class MessageItem {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
                if (_data) {
                    this.IsError = _data["IsError"];
                    this.Message = _data["Message"];
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new MessageItem();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["IsError"] = this.IsError;
                data["Message"] = this.Message;
                return data;
            }
        }
        ApiClient.MessageItem = MessageItem;
        class LoginUserResult extends MessageItem {
            constructor(data) {
                super(data);
            }
            init(_data) {
                super.init(_data);
                if (_data) {
                    this.FirstName = _data["FirstName"];
                    this.LastName = _data["LastName"];
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new LoginUserResult();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["FirstName"] = this.FirstName;
                data["LastName"] = this.LastName;
                super.toJSON(data);
                return data;
            }
        }
        ApiClient.LoginUserResult = LoginUserResult;
        class EFCoreEntityBaseOftblRole {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                throw new Error("The abstract class 'EFCoreEntityBaseOftblRole' cannot be instantiated.");
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                return data;
            }
        }
        ApiClient.EFCoreEntityBaseOftblRole = EFCoreEntityBaseOftblRole;
        class tblRole extends EFCoreEntityBaseOftblRole {
            constructor(data) {
                super(data);
            }
            init(_data) {
                super.init(_data);
                if (_data) {
                    this.RoleID = _data["RoleID"];
                    this.RoleName = _data["RoleName"];
                    this.CanReadReviews = _data["CanReadReviews"];
                    this.CanWriteReview = _data["CanWriteReview"];
                    this.CanCreateRestaurant = _data["CanCreateRestaurant"];
                    this.CanEditRestaurant = _data["CanEditRestaurant"];
                    this.CanReplayToRestaurantReview = _data["CanReplayToRestaurantReview"];
                    this.CanEditMember = _data["CanEditMember"];
                    this.CanEditRestaurantReview = _data["CanEditRestaurantReview"];
                    this.CanEditReplayToRestaurantReview = _data["CanEditReplayToRestaurantReview"];
                    this.CanEditRole = _data["CanEditRole"];
                    this.CanListOwnRestaurants = _data["CanListOwnRestaurants"];
                    this.CanListAllRestaurants = _data["CanListAllRestaurants"];
                    if (Array.isArray(_data["tblMemberRoleList"])) {
                        this.tblMemberRoleList = [];
                        for (let item of _data["tblMemberRoleList"])
                            this.tblMemberRoleList.push(tblMemberRole.fromJS(item));
                    }
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new tblRole();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["RoleID"] = this.RoleID;
                data["RoleName"] = this.RoleName;
                data["CanReadReviews"] = this.CanReadReviews;
                data["CanWriteReview"] = this.CanWriteReview;
                data["CanCreateRestaurant"] = this.CanCreateRestaurant;
                data["CanEditRestaurant"] = this.CanEditRestaurant;
                data["CanReplayToRestaurantReview"] = this.CanReplayToRestaurantReview;
                data["CanEditMember"] = this.CanEditMember;
                data["CanEditRestaurantReview"] = this.CanEditRestaurantReview;
                data["CanEditReplayToRestaurantReview"] = this.CanEditReplayToRestaurantReview;
                data["CanEditRole"] = this.CanEditRole;
                data["CanListOwnRestaurants"] = this.CanListOwnRestaurants;
                data["CanListAllRestaurants"] = this.CanListAllRestaurants;
                if (Array.isArray(this.tblMemberRoleList)) {
                    data["tblMemberRoleList"] = [];
                    for (let item of this.tblMemberRoleList)
                        data["tblMemberRoleList"].push(item.toJSON());
                }
                super.toJSON(data);
                return data;
            }
        }
        ApiClient.tblRole = tblRole;
        class EFCoreEntityBaseOftblMemberRole {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                throw new Error("The abstract class 'EFCoreEntityBaseOftblMemberRole' cannot be instantiated.");
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                return data;
            }
        }
        ApiClient.EFCoreEntityBaseOftblMemberRole = EFCoreEntityBaseOftblMemberRole;
        class tblMemberRole extends EFCoreEntityBaseOftblMemberRole {
            constructor(data) {
                super(data);
            }
            init(_data) {
                super.init(_data);
                if (_data) {
                    this.MemberID = _data["MemberID"];
                    this.RoleID = _data["RoleID"];
                    this.tblMember = _data["tblMember"] ? tblMember.fromJS(_data["tblMember"]) : undefined;
                    this.tblRole = _data["tblRole"] ? tblRole.fromJS(_data["tblRole"]) : undefined;
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new tblMemberRole();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["MemberID"] = this.MemberID;
                data["RoleID"] = this.RoleID;
                data["tblMember"] = this.tblMember ? this.tblMember.toJSON() : undefined;
                data["tblRole"] = this.tblRole ? this.tblRole.toJSON() : undefined;
                super.toJSON(data);
                return data;
            }
        }
        ApiClient.tblMemberRole = tblMemberRole;
        class EFCoreEntityBaseOftblMember {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                throw new Error("The abstract class 'EFCoreEntityBaseOftblMember' cannot be instantiated.");
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                return data;
            }
        }
        ApiClient.EFCoreEntityBaseOftblMember = EFCoreEntityBaseOftblMember;
        class tblMember extends EFCoreEntityBaseOftblMember {
            constructor(data) {
                super(data);
            }
            init(_data) {
                super.init(_data);
                if (_data) {
                    this.MemberID = _data["MemberID"];
                    this.CreationDate = _data["CreationDate"] ? new Date(_data["CreationDate"].toString()) : undefined;
                    this.FirstName = _data["FirstName"];
                    this.LastName = _data["LastName"];
                    this.Email = _data["Email"];
                    this.Username = _data["Username"];
                    this.Password = _data["Password"];
                    this.LastLoginDate = _data["LastLoginDate"] ? new Date(_data["LastLoginDate"].toString()) : undefined;
                    this.LoginsCount = _data["LoginsCount"];
                    if (Array.isArray(_data["tblMemberRoleList"])) {
                        this.tblMemberRoleList = [];
                        for (let item of _data["tblMemberRoleList"])
                            this.tblMemberRoleList.push(tblMemberRole.fromJS(item));
                    }
                    if (Array.isArray(_data["tblRestaurantList"])) {
                        this.tblRestaurantList = [];
                        for (let item of _data["tblRestaurantList"])
                            this.tblRestaurantList.push(tblRestaurant.fromJS(item));
                    }
                    if (Array.isArray(_data["tblReviewList"])) {
                        this.tblReviewList = [];
                        for (let item of _data["tblReviewList"])
                            this.tblReviewList.push(tblReview.fromJS(item));
                    }
                    if (Array.isArray(_data["tblReviewReplyList"])) {
                        this.tblReviewReplyList = [];
                        for (let item of _data["tblReviewReplyList"])
                            this.tblReviewReplyList.push(tblReviewReply.fromJS(item));
                    }
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new tblMember();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["MemberID"] = this.MemberID;
                data["CreationDate"] = this.CreationDate ? this.CreationDate.toISOString() : undefined;
                data["FirstName"] = this.FirstName;
                data["LastName"] = this.LastName;
                data["Email"] = this.Email;
                data["Username"] = this.Username;
                data["Password"] = this.Password;
                data["LastLoginDate"] = this.LastLoginDate ? this.LastLoginDate.toISOString() : undefined;
                data["LoginsCount"] = this.LoginsCount;
                if (Array.isArray(this.tblMemberRoleList)) {
                    data["tblMemberRoleList"] = [];
                    for (let item of this.tblMemberRoleList)
                        data["tblMemberRoleList"].push(item.toJSON());
                }
                if (Array.isArray(this.tblRestaurantList)) {
                    data["tblRestaurantList"] = [];
                    for (let item of this.tblRestaurantList)
                        data["tblRestaurantList"].push(item.toJSON());
                }
                if (Array.isArray(this.tblReviewList)) {
                    data["tblReviewList"] = [];
                    for (let item of this.tblReviewList)
                        data["tblReviewList"].push(item.toJSON());
                }
                if (Array.isArray(this.tblReviewReplyList)) {
                    data["tblReviewReplyList"] = [];
                    for (let item of this.tblReviewReplyList)
                        data["tblReviewReplyList"].push(item.toJSON());
                }
                super.toJSON(data);
                return data;
            }
        }
        ApiClient.tblMember = tblMember;
        class EFCoreEntityBaseOftblRestaurant {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                throw new Error("The abstract class 'EFCoreEntityBaseOftblRestaurant' cannot be instantiated.");
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                return data;
            }
        }
        ApiClient.EFCoreEntityBaseOftblRestaurant = EFCoreEntityBaseOftblRestaurant;
        class tblRestaurant extends EFCoreEntityBaseOftblRestaurant {
            constructor(data) {
                super(data);
            }
            init(_data) {
                super.init(_data);
                if (_data) {
                    this.RestaurantID = _data["RestaurantID"];
                    this.OwnerMemberID = _data["OwnerMemberID"];
                    this.CreationDate = _data["CreationDate"] ? new Date(_data["CreationDate"].toString()) : undefined;
                    this.Name = _data["Name"];
                    this.Address = _data["Address"];
                    this.Description = _data["Description"];
                    this.tblMember = _data["tblMember"] ? tblMember.fromJS(_data["tblMember"]) : undefined;
                    if (Array.isArray(_data["tblReviewList"])) {
                        this.tblReviewList = [];
                        for (let item of _data["tblReviewList"])
                            this.tblReviewList.push(tblReview.fromJS(item));
                    }
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new tblRestaurant();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["RestaurantID"] = this.RestaurantID;
                data["OwnerMemberID"] = this.OwnerMemberID;
                data["CreationDate"] = this.CreationDate ? this.CreationDate.toISOString() : undefined;
                data["Name"] = this.Name;
                data["Address"] = this.Address;
                data["Description"] = this.Description;
                data["tblMember"] = this.tblMember ? this.tblMember.toJSON() : undefined;
                if (Array.isArray(this.tblReviewList)) {
                    data["tblReviewList"] = [];
                    for (let item of this.tblReviewList)
                        data["tblReviewList"].push(item.toJSON());
                }
                super.toJSON(data);
                return data;
            }
        }
        ApiClient.tblRestaurant = tblRestaurant;
        class EFCoreEntityBaseOftblReview {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                throw new Error("The abstract class 'EFCoreEntityBaseOftblReview' cannot be instantiated.");
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                return data;
            }
        }
        ApiClient.EFCoreEntityBaseOftblReview = EFCoreEntityBaseOftblReview;
        class tblReview extends EFCoreEntityBaseOftblReview {
            constructor(data) {
                super(data);
            }
            init(_data) {
                super.init(_data);
                if (_data) {
                    this.ReviewID = _data["ReviewID"];
                    this.RestaurantID = _data["RestaurantID"];
                    this.ReviewerMemberID = _data["ReviewerMemberID"];
                    this.CreationDate = _data["CreationDate"] ? new Date(_data["CreationDate"].toString()) : undefined;
                    this.RatingStars = _data["RatingStars"];
                    this.Comment = _data["Comment"];
                    this.tblMember = _data["tblMember"] ? tblMember.fromJS(_data["tblMember"]) : undefined;
                    this.tblRestaurant = _data["tblRestaurant"] ? tblRestaurant.fromJS(_data["tblRestaurant"]) : undefined;
                    this.tblReviewReply = _data["tblReviewReply"] ? tblReviewReply.fromJS(_data["tblReviewReply"]) : undefined;
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new tblReview();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["ReviewID"] = this.ReviewID;
                data["RestaurantID"] = this.RestaurantID;
                data["ReviewerMemberID"] = this.ReviewerMemberID;
                data["CreationDate"] = this.CreationDate ? this.CreationDate.toISOString() : undefined;
                data["RatingStars"] = this.RatingStars;
                data["Comment"] = this.Comment;
                data["tblMember"] = this.tblMember ? this.tblMember.toJSON() : undefined;
                data["tblRestaurant"] = this.tblRestaurant ? this.tblRestaurant.toJSON() : undefined;
                data["tblReviewReply"] = this.tblReviewReply ? this.tblReviewReply.toJSON() : undefined;
                super.toJSON(data);
                return data;
            }
        }
        ApiClient.tblReview = tblReview;
        class EFCoreEntityBaseOftblReviewReply {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                throw new Error("The abstract class 'EFCoreEntityBaseOftblReviewReply' cannot be instantiated.");
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                return data;
            }
        }
        ApiClient.EFCoreEntityBaseOftblReviewReply = EFCoreEntityBaseOftblReviewReply;
        class tblReviewReply extends EFCoreEntityBaseOftblReviewReply {
            constructor(data) {
                super(data);
            }
            init(_data) {
                super.init(_data);
                if (_data) {
                    this.ReviewID = _data["ReviewID"];
                    this.ReplyedMemberID = _data["ReplyedMemberID"];
                    this.CreationDate = _data["CreationDate"] ? new Date(_data["CreationDate"].toString()) : undefined;
                    this.ReplyText = _data["ReplyText"];
                    this.tblMember = _data["tblMember"] ? tblMember.fromJS(_data["tblMember"]) : undefined;
                    this.tblReview = _data["tblReview"] ? tblReview.fromJS(_data["tblReview"]) : undefined;
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new tblReviewReply();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["ReviewID"] = this.ReviewID;
                data["ReplyedMemberID"] = this.ReplyedMemberID;
                data["CreationDate"] = this.CreationDate ? this.CreationDate.toISOString() : undefined;
                data["ReplyText"] = this.ReplyText;
                data["tblMember"] = this.tblMember ? this.tblMember.toJSON() : undefined;
                data["tblReview"] = this.tblReview ? this.tblReview.toJSON() : undefined;
                super.toJSON(data);
                return data;
            }
        }
        ApiClient.tblReviewReply = tblReviewReply;
        class MembersResult {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
                if (_data) {
                    this.MemberID = _data["MemberID"];
                    this.Email = _data["Email"];
                    this.Username = _data["Username"];
                    this.FirstName = _data["FirstName"];
                    this.LastName = _data["LastName"];
                    if (Array.isArray(_data["Roles"])) {
                        this.Roles = [];
                        for (let item of _data["Roles"])
                            this.Roles.push(RoleItem.fromJS(item));
                    }
                    this.LoginsCount = _data["LoginsCount"];
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new MembersResult();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["MemberID"] = this.MemberID;
                data["Email"] = this.Email;
                data["Username"] = this.Username;
                data["FirstName"] = this.FirstName;
                data["LastName"] = this.LastName;
                if (Array.isArray(this.Roles)) {
                    data["Roles"] = [];
                    for (let item of this.Roles)
                        data["Roles"].push(item.toJSON());
                }
                data["LoginsCount"] = this.LoginsCount;
                return data;
            }
        }
        ApiClient.MembersResult = MembersResult;
        class RoleItem {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
                if (_data) {
                    this.RoleID = _data["RoleID"];
                    this.RoleName = _data["RoleName"];
                    this.IsAssigned = _data["IsAssigned"];
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new RoleItem();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["RoleID"] = this.RoleID;
                data["RoleName"] = this.RoleName;
                data["IsAssigned"] = this.IsAssigned;
                return data;
            }
        }
        ApiClient.RoleItem = RoleItem;
        class RestaurantExtendedResult {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
                if (_data) {
                    this.RestaurantID = _data["RestaurantID"];
                    this.Name = _data["Name"];
                    this.Address = _data["Address"];
                    this.Description = _data["Description"];
                    this.AverageRating = _data["AverageRating"];
                    this.OwnerMemberID = _data["OwnerMemberID"];
                    this.OwnerFullName = _data["OwnerFullName"];
                    this.ReviewsCount = _data["ReviewsCount"];
                    this.NewUnrepliedReviews = _data["NewUnrepliedReviews"];
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new RestaurantExtendedResult();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["RestaurantID"] = this.RestaurantID;
                data["Name"] = this.Name;
                data["Address"] = this.Address;
                data["Description"] = this.Description;
                data["AverageRating"] = this.AverageRating;
                data["OwnerMemberID"] = this.OwnerMemberID;
                data["OwnerFullName"] = this.OwnerFullName;
                data["ReviewsCount"] = this.ReviewsCount;
                data["NewUnrepliedReviews"] = this.NewUnrepliedReviews;
                return data;
            }
        }
        ApiClient.RestaurantExtendedResult = RestaurantExtendedResult;
        class ReviewExtended {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
                if (_data) {
                    this.RestaurantID = _data["RestaurantID"];
                    this.ReviewID = _data["ReviewID"];
                    this.CreationDate = _data["CreationDate"] ? new Date(_data["CreationDate"].toString()) : undefined;
                    this.RatingStars = _data["RatingStars"];
                    this.Comment = _data["Comment"];
                    this.Reviever = _data["Reviever"] ? ReviewerMember.fromJS(_data["Reviever"]) : undefined;
                    this.Replay = _data["Replay"] ? ReviewReplay.fromJS(_data["Replay"]) : undefined;
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new ReviewExtended();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["RestaurantID"] = this.RestaurantID;
                data["ReviewID"] = this.ReviewID;
                data["CreationDate"] = this.CreationDate ? this.CreationDate.toISOString() : undefined;
                data["RatingStars"] = this.RatingStars;
                data["Comment"] = this.Comment;
                data["Reviever"] = this.Reviever ? this.Reviever.toJSON() : undefined;
                data["Replay"] = this.Replay ? this.Replay.toJSON() : undefined;
                return data;
            }
        }
        ApiClient.ReviewExtended = ReviewExtended;
        class ReviewerMember {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
                if (_data) {
                    this.MemberID = _data["MemberID"];
                    this.FirstName = _data["FirstName"];
                    this.LastName = _data["LastName"];
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new ReviewerMember();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["MemberID"] = this.MemberID;
                data["FirstName"] = this.FirstName;
                data["LastName"] = this.LastName;
                return data;
            }
        }
        ApiClient.ReviewerMember = ReviewerMember;
        class ReviewReplay {
            constructor(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            init(_data) {
                if (_data) {
                    this.Replyer = _data["Replyer"] ? ReviewerMember.fromJS(_data["Replyer"]) : undefined;
                    this.CreationDate = _data["CreationDate"] ? new Date(_data["CreationDate"].toString()) : undefined;
                    this.ReplyText = _data["ReplyText"];
                }
            }
            static fromJS(data) {
                data = typeof data === 'object' ? data : {};
                let result = new ReviewReplay();
                result.init(data);
                return result;
            }
            toJSON(data) {
                data = typeof data === 'object' ? data : {};
                data["Replyer"] = this.Replyer ? this.Replyer.toJSON() : undefined;
                data["CreationDate"] = this.CreationDate ? this.CreationDate.toISOString() : undefined;
                data["ReplyText"] = this.ReplyText;
                return data;
            }
        }
        ApiClient.ReviewReplay = ReviewReplay;
        class ApiException extends Error {
            constructor(message, status, response, headers, result) {
                super();
                this.isApiException = true;
                this.message = message;
                this.status = status;
                this.response = response;
                this.headers = headers;
                this.result = result;
            }
            static isApiException(obj) {
                return obj.isApiException === true;
            }
        }
        ApiClient.ApiException = ApiException;
        function throwException(message, status, response, headers, result) {
            if (result !== null && result !== undefined)
                throw result;
            else
                throw new ApiException(message, status, response, headers, null);
        }
    })(ApiClient = RestaurantsReview.ApiClient || (RestaurantsReview.ApiClient = {}));
})(RestaurantsReview || (RestaurantsReview = {}));
//# sourceMappingURL=RestaurantsReviewClient.js.map