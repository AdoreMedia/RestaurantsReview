/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

namespace RestaurantsReview.ApiClient {

export class RestaurantsReviewClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    RegisterUser(firstName: string | null, lastName: string | null, email: string | null, username: string | null, password: string | null): Promise<MessageItem | null> {
        let url_ = this.baseUrl + "/api/RegisterUser?";
        if (firstName === undefined)
            throw new Error("The parameter 'firstName' must be defined.");
        else if(firstName !== null)
            url_ += "firstName=" + encodeURIComponent("" + firstName) + "&";
        if (lastName === undefined)
            throw new Error("The parameter 'lastName' must be defined.");
        else if(lastName !== null)
            url_ += "lastName=" + encodeURIComponent("" + lastName) + "&";
        if (email === undefined)
            throw new Error("The parameter 'email' must be defined.");
        else if(email !== null)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        if (username === undefined)
            throw new Error("The parameter 'username' must be defined.");
        else if(username !== null)
            url_ += "username=" + encodeURIComponent("" + username) + "&";
        if (password === undefined)
            throw new Error("The parameter 'password' must be defined.");
        else if(password !== null)
            url_ += "password=" + encodeURIComponent("" + password) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegisterUser(_response);
        });
    }

    protected processRegisterUser(response: Response): Promise<MessageItem | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MessageItem.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MessageItem | null>(<any>null);
    }

    LoginUser(username: string | null, password: string | null): Promise<LoginUserResult | null> {
        let url_ = this.baseUrl + "/api/LoginUser?";
        if (username === undefined)
            throw new Error("The parameter 'username' must be defined.");
        else if(username !== null)
            url_ += "username=" + encodeURIComponent("" + username) + "&";
        if (password === undefined)
            throw new Error("The parameter 'password' must be defined.");
        else if(password !== null)
            url_ += "password=" + encodeURIComponent("" + password) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoginUser(_response);
        });
    }

    protected processLoginUser(response: Response): Promise<LoginUserResult | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LoginUserResult.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoginUserResult | null>(<any>null);
    }

    GetCurrentUserPermissions(): Promise<tblRole[] | null> {
        let url_ = this.baseUrl + "/api/GetCurrentUserPermissions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUserPermissions(_response);
        });
    }

    protected processGetCurrentUserPermissions(response: Response): Promise<tblRole[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(tblRole.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<tblRole[] | null>(<any>null);
    }

    GetRoles(): Promise<tblRole[] | null> {
        let url_ = this.baseUrl + "/api/GetRoles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRoles(_response);
        });
    }

    protected processGetRoles(response: Response): Promise<tblRole[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(tblRole.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<tblRole[] | null>(<any>null);
    }

    GetRole(roleId: number): Promise<tblRole | null> {
        let url_ = this.baseUrl + "/api/GetRoleAsync?";
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined and cannot be null.");
        else
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRole(_response);
        });
    }

    protected processGetRole(response: Response): Promise<tblRole | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? tblRole.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<tblRole | null>(<any>null);
    }

    SaveRole(roleJson: string | null): Promise<boolean> {
        let url_ = this.baseUrl + "/api/SaveRoleAsync?";
        if (roleJson === undefined)
            throw new Error("The parameter 'roleJson' must be defined.");
        else if(roleJson !== null)
            url_ += "roleJson=" + encodeURIComponent("" + roleJson) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveRole(_response);
        });
    }

    protected processSaveRole(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    DeleteRole(roleId: number): Promise<boolean> {
        let url_ = this.baseUrl + "/api/DeleteRoleAsync?";
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined and cannot be null.");
        else
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteRole(_response);
        });
    }

    protected processDeleteRole(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    GetMembersWithRoles(sortDesc: boolean | undefined, skip: number | undefined, take: number | undefined): Promise<MembersResult[] | null> {
        let url_ = this.baseUrl + "/api/GetMembersWithRoles?";
        if (sortDesc === null)
            throw new Error("The parameter 'sortDesc' cannot be null.");
        else if (sortDesc !== undefined)
            url_ += "sortDesc=" + encodeURIComponent("" + sortDesc) + "&";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take === null)
            throw new Error("The parameter 'take' cannot be null.");
        else if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMembersWithRoles(_response);
        });
    }

    protected processGetMembersWithRoles(response: Response): Promise<MembersResult[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MembersResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MembersResult[] | null>(<any>null);
    }

    GetMemberDetails(memberId: number): Promise<MembersResult | null> {
        let url_ = this.baseUrl + "/api/GetMemberDetails?";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined and cannot be null.");
        else
            url_ += "memberId=" + encodeURIComponent("" + memberId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMemberDetails(_response);
        });
    }

    protected processGetMemberDetails(response: Response): Promise<MembersResult | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? MembersResult.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MembersResult | null>(<any>null);
    }

    DeleteMember(memberId: number): Promise<boolean> {
        let url_ = this.baseUrl + "/api/DeleteMember?";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined and cannot be null.");
        else
            url_ += "memberId=" + encodeURIComponent("" + memberId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteMember(_response);
        });
    }

    protected processDeleteMember(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    SaveMemberRoles(memberId: number, assignedRolesCsv: string | null): Promise<boolean> {
        let url_ = this.baseUrl + "/api/SaveMemberRoles?";
        if (memberId === undefined || memberId === null)
            throw new Error("The parameter 'memberId' must be defined and cannot be null.");
        else
            url_ += "memberId=" + encodeURIComponent("" + memberId) + "&";
        if (assignedRolesCsv === undefined)
            throw new Error("The parameter 'assignedRolesCsv' must be defined.");
        else if(assignedRolesCsv !== null)
            url_ += "assignedRolesCsv=" + encodeURIComponent("" + assignedRolesCsv) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveMemberRoles(_response);
        });
    }

    protected processSaveMemberRoles(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    CreateNewRestaurant(restaurantName: string | null, restaurantAddress: string | null, restaurantDescription: string | null): Promise<number> {
        let url_ = this.baseUrl + "/api/CreateNewRestaurant?";
        if (restaurantName === undefined)
            throw new Error("The parameter 'restaurantName' must be defined.");
        else if(restaurantName !== null)
            url_ += "restaurantName=" + encodeURIComponent("" + restaurantName) + "&";
        if (restaurantAddress === undefined)
            throw new Error("The parameter 'restaurantAddress' must be defined.");
        else if(restaurantAddress !== null)
            url_ += "restaurantAddress=" + encodeURIComponent("" + restaurantAddress) + "&";
        if (restaurantDescription === undefined)
            throw new Error("The parameter 'restaurantDescription' must be defined.");
        else if(restaurantDescription !== null)
            url_ += "restaurantDescription=" + encodeURIComponent("" + restaurantDescription) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateNewRestaurant(_response);
        });
    }

    protected processCreateNewRestaurant(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    SaveRestaurant(restaurantId: number, restaurantName: string | null, restaurantAddress: string | null, restaurantDescription: string | null): Promise<boolean> {
        let url_ = this.baseUrl + "/api/SaveRestaurant?";
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined and cannot be null.");
        else
            url_ += "restaurantId=" + encodeURIComponent("" + restaurantId) + "&";
        if (restaurantName === undefined)
            throw new Error("The parameter 'restaurantName' must be defined.");
        else if(restaurantName !== null)
            url_ += "restaurantName=" + encodeURIComponent("" + restaurantName) + "&";
        if (restaurantAddress === undefined)
            throw new Error("The parameter 'restaurantAddress' must be defined.");
        else if(restaurantAddress !== null)
            url_ += "restaurantAddress=" + encodeURIComponent("" + restaurantAddress) + "&";
        if (restaurantDescription === undefined)
            throw new Error("The parameter 'restaurantDescription' must be defined.");
        else if(restaurantDescription !== null)
            url_ += "restaurantDescription=" + encodeURIComponent("" + restaurantDescription) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveRestaurant(_response);
        });
    }

    protected processSaveRestaurant(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    DeleteRestaurant(restaurantId: number): Promise<boolean> {
        let url_ = this.baseUrl + "/api/DeleteRestaurant?";
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined and cannot be null.");
        else
            url_ += "restaurantId=" + encodeURIComponent("" + restaurantId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteRestaurant(_response);
        });
    }

    protected processDeleteRestaurant(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    GetSingleRestaurant(restaurantId: number): Promise<RestaurantExtendedResult | null> {
        let url_ = this.baseUrl + "/api/GetSingleRestaurant?";
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined and cannot be null.");
        else
            url_ += "restaurantId=" + encodeURIComponent("" + restaurantId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSingleRestaurant(_response);
        });
    }

    protected processGetSingleRestaurant(response: Response): Promise<RestaurantExtendedResult | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RestaurantExtendedResult.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RestaurantExtendedResult | null>(<any>null);
    }

    GetRestaurants(skip: number | undefined, take: number | undefined): Promise<RestaurantExtendedResult[] | null> {
        let url_ = this.baseUrl + "/api/GetRestaurants?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take === null)
            throw new Error("The parameter 'take' cannot be null.");
        else if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRestaurants(_response);
        });
    }

    protected processGetRestaurants(response: Response): Promise<RestaurantExtendedResult[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RestaurantExtendedResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RestaurantExtendedResult[] | null>(<any>null);
    }

    AddRestaurantReview(restaurantId: number, rating: number | null, comment: string | null): Promise<boolean> {
        let url_ = this.baseUrl + "/api/AddRestaurantReview?";
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined and cannot be null.");
        else
            url_ += "restaurantId=" + encodeURIComponent("" + restaurantId) + "&";
        if (rating === undefined)
            throw new Error("The parameter 'rating' must be defined.");
        else if(rating !== null)
            url_ += "rating=" + encodeURIComponent("" + rating) + "&";
        if (comment === undefined)
            throw new Error("The parameter 'comment' must be defined.");
        else if(comment !== null)
            url_ += "comment=" + encodeURIComponent("" + comment) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddRestaurantReview(_response);
        });
    }

    protected processAddRestaurantReview(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    UpdateRestaurantReview(reviewId: number, rating: number | null, comment: string | null): Promise<boolean> {
        let url_ = this.baseUrl + "/api/UpdateRestaurantReview?";
        if (reviewId === undefined || reviewId === null)
            throw new Error("The parameter 'reviewId' must be defined and cannot be null.");
        else
            url_ += "reviewId=" + encodeURIComponent("" + reviewId) + "&";
        if (rating === undefined)
            throw new Error("The parameter 'rating' must be defined.");
        else if(rating !== null)
            url_ += "rating=" + encodeURIComponent("" + rating) + "&";
        if (comment === undefined)
            throw new Error("The parameter 'comment' must be defined.");
        else if(comment !== null)
            url_ += "comment=" + encodeURIComponent("" + comment) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateRestaurantReview(_response);
        });
    }

    protected processUpdateRestaurantReview(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    DeleteRestaurantReview(reviewId: number): Promise<boolean> {
        let url_ = this.baseUrl + "/api/DeleteRestaurantReview?";
        if (reviewId === undefined || reviewId === null)
            throw new Error("The parameter 'reviewId' must be defined and cannot be null.");
        else
            url_ += "reviewId=" + encodeURIComponent("" + reviewId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteRestaurantReview(_response);
        });
    }

    protected processDeleteRestaurantReview(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    GetRestaurantReviews(restaurantId: number): Promise<ReviewExtended[] | null> {
        let url_ = this.baseUrl + "/api/GetRestaurantReviews?";
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined and cannot be null.");
        else
            url_ += "restaurantId=" + encodeURIComponent("" + restaurantId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRestaurantReviews(_response);
        });
    }

    protected processGetRestaurantReviews(response: Response): Promise<ReviewExtended[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ReviewExtended.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReviewExtended[] | null>(<any>null);
    }

    AddReviewReply(reviewId: number, replyText: string | null): Promise<boolean> {
        let url_ = this.baseUrl + "/api/AddReviewReply?";
        if (reviewId === undefined || reviewId === null)
            throw new Error("The parameter 'reviewId' must be defined and cannot be null.");
        else
            url_ += "reviewId=" + encodeURIComponent("" + reviewId) + "&";
        if (replyText === undefined)
            throw new Error("The parameter 'replyText' must be defined.");
        else if(replyText !== null)
            url_ += "replyText=" + encodeURIComponent("" + replyText) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddReviewReply(_response);
        });
    }

    protected processAddReviewReply(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    UpdateReviewReply(reviewId: number, replyText: string | null): Promise<boolean> {
        let url_ = this.baseUrl + "/api/UpdateReviewReply?";
        if (reviewId === undefined || reviewId === null)
            throw new Error("The parameter 'reviewId' must be defined and cannot be null.");
        else
            url_ += "reviewId=" + encodeURIComponent("" + reviewId) + "&";
        if (replyText === undefined)
            throw new Error("The parameter 'replyText' must be defined.");
        else if(replyText !== null)
            url_ += "replyText=" + encodeURIComponent("" + replyText) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateReviewReply(_response);
        });
    }

    protected processUpdateReviewReply(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }

    DeleteReviewReply(reviewId: number): Promise<boolean> {
        let url_ = this.baseUrl + "/api/DeleteReviewReply?";
        if (reviewId === undefined || reviewId === null)
            throw new Error("The parameter 'reviewId' must be defined and cannot be null.");
        else
            url_ += "reviewId=" + encodeURIComponent("" + reviewId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteReviewReply(_response);
        });
    }

    protected processDeleteReviewReply(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class MessageItem implements IMessageItem {
    IsError!: boolean;
    Message?: string | undefined;

    constructor(data?: IMessageItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.IsError = _data["IsError"];
            this.Message = _data["Message"];
        }
    }

    static fromJS(data: any): MessageItem {
        data = typeof data === 'object' ? data : {};
        let result = new MessageItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IsError"] = this.IsError;
        data["Message"] = this.Message;
        return data; 
    }
}

export interface IMessageItem {
    IsError: boolean;
    Message?: string | undefined;
}

export class LoginUserResult extends MessageItem implements ILoginUserResult {
    FirstName?: string | undefined;
    LastName?: string | undefined;

    constructor(data?: ILoginUserResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.FirstName = _data["FirstName"];
            this.LastName = _data["LastName"];
        }
    }

    static fromJS(data: any): LoginUserResult {
        data = typeof data === 'object' ? data : {};
        let result = new LoginUserResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        super.toJSON(data);
        return data; 
    }
}

export interface ILoginUserResult extends IMessageItem {
    FirstName?: string | undefined;
    LastName?: string | undefined;
}

export abstract class EFCoreEntityBaseOftblRole implements IEFCoreEntityBaseOftblRole {

    constructor(data?: IEFCoreEntityBaseOftblRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EFCoreEntityBaseOftblRole {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'EFCoreEntityBaseOftblRole' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEFCoreEntityBaseOftblRole {
}

export class tblRole extends EFCoreEntityBaseOftblRole implements ItblRole {
    RoleID!: number;
    RoleName?: string | undefined;
    CanReadReviews!: boolean;
    CanWriteReview!: boolean;
    CanCreateRestaurant!: boolean;
    CanEditRestaurant!: boolean;
    CanReplayToRestaurantReview!: boolean;
    CanEditMember!: boolean;
    CanEditRestaurantReview!: boolean;
    CanEditReplayToRestaurantReview!: boolean;
    CanEditRole!: boolean;
    CanListOwnRestaurants!: boolean;
    CanListAllRestaurants!: boolean;
    tblMemberRoleList?: tblMemberRole[] | undefined;

    constructor(data?: ItblRole) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.RoleID = _data["RoleID"];
            this.RoleName = _data["RoleName"];
            this.CanReadReviews = _data["CanReadReviews"];
            this.CanWriteReview = _data["CanWriteReview"];
            this.CanCreateRestaurant = _data["CanCreateRestaurant"];
            this.CanEditRestaurant = _data["CanEditRestaurant"];
            this.CanReplayToRestaurantReview = _data["CanReplayToRestaurantReview"];
            this.CanEditMember = _data["CanEditMember"];
            this.CanEditRestaurantReview = _data["CanEditRestaurantReview"];
            this.CanEditReplayToRestaurantReview = _data["CanEditReplayToRestaurantReview"];
            this.CanEditRole = _data["CanEditRole"];
            this.CanListOwnRestaurants = _data["CanListOwnRestaurants"];
            this.CanListAllRestaurants = _data["CanListAllRestaurants"];
            if (Array.isArray(_data["tblMemberRoleList"])) {
                this.tblMemberRoleList = [] as any;
                for (let item of _data["tblMemberRoleList"])
                    this.tblMemberRoleList!.push(tblMemberRole.fromJS(item));
            }
        }
    }

    static fromJS(data: any): tblRole {
        data = typeof data === 'object' ? data : {};
        let result = new tblRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RoleID"] = this.RoleID;
        data["RoleName"] = this.RoleName;
        data["CanReadReviews"] = this.CanReadReviews;
        data["CanWriteReview"] = this.CanWriteReview;
        data["CanCreateRestaurant"] = this.CanCreateRestaurant;
        data["CanEditRestaurant"] = this.CanEditRestaurant;
        data["CanReplayToRestaurantReview"] = this.CanReplayToRestaurantReview;
        data["CanEditMember"] = this.CanEditMember;
        data["CanEditRestaurantReview"] = this.CanEditRestaurantReview;
        data["CanEditReplayToRestaurantReview"] = this.CanEditReplayToRestaurantReview;
        data["CanEditRole"] = this.CanEditRole;
        data["CanListOwnRestaurants"] = this.CanListOwnRestaurants;
        data["CanListAllRestaurants"] = this.CanListAllRestaurants;
        if (Array.isArray(this.tblMemberRoleList)) {
            data["tblMemberRoleList"] = [];
            for (let item of this.tblMemberRoleList)
                data["tblMemberRoleList"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ItblRole extends IEFCoreEntityBaseOftblRole {
    RoleID: number;
    RoleName?: string | undefined;
    CanReadReviews: boolean;
    CanWriteReview: boolean;
    CanCreateRestaurant: boolean;
    CanEditRestaurant: boolean;
    CanReplayToRestaurantReview: boolean;
    CanEditMember: boolean;
    CanEditRestaurantReview: boolean;
    CanEditReplayToRestaurantReview: boolean;
    CanEditRole: boolean;
    CanListOwnRestaurants: boolean;
    CanListAllRestaurants: boolean;
    tblMemberRoleList?: tblMemberRole[] | undefined;
}

export abstract class EFCoreEntityBaseOftblMemberRole implements IEFCoreEntityBaseOftblMemberRole {

    constructor(data?: IEFCoreEntityBaseOftblMemberRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EFCoreEntityBaseOftblMemberRole {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'EFCoreEntityBaseOftblMemberRole' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEFCoreEntityBaseOftblMemberRole {
}

export class tblMemberRole extends EFCoreEntityBaseOftblMemberRole implements ItblMemberRole {
    MemberID!: number;
    RoleID!: number;
    tblMember?: tblMember | undefined;
    tblRole?: tblRole | undefined;

    constructor(data?: ItblMemberRole) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.MemberID = _data["MemberID"];
            this.RoleID = _data["RoleID"];
            this.tblMember = _data["tblMember"] ? tblMember.fromJS(_data["tblMember"]) : <any>undefined;
            this.tblRole = _data["tblRole"] ? tblRole.fromJS(_data["tblRole"]) : <any>undefined;
        }
    }

    static fromJS(data: any): tblMemberRole {
        data = typeof data === 'object' ? data : {};
        let result = new tblMemberRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MemberID"] = this.MemberID;
        data["RoleID"] = this.RoleID;
        data["tblMember"] = this.tblMember ? this.tblMember.toJSON() : <any>undefined;
        data["tblRole"] = this.tblRole ? this.tblRole.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ItblMemberRole extends IEFCoreEntityBaseOftblMemberRole {
    MemberID: number;
    RoleID: number;
    tblMember?: tblMember | undefined;
    tblRole?: tblRole | undefined;
}

export abstract class EFCoreEntityBaseOftblMember implements IEFCoreEntityBaseOftblMember {

    constructor(data?: IEFCoreEntityBaseOftblMember) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EFCoreEntityBaseOftblMember {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'EFCoreEntityBaseOftblMember' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEFCoreEntityBaseOftblMember {
}

export class tblMember extends EFCoreEntityBaseOftblMember implements ItblMember {
    MemberID!: number;
    CreationDate!: Date;
    FirstName?: string | undefined;
    LastName?: string | undefined;
    Email?: string | undefined;
    Username?: string | undefined;
    Password?: string | undefined;
    LastLoginDate?: Date | undefined;
    LoginsCount!: number;
    tblMemberRoleList?: tblMemberRole[] | undefined;
    tblRestaurantList?: tblRestaurant[] | undefined;
    tblReviewList?: tblReview[] | undefined;
    tblReviewReplyList?: tblReviewReply[] | undefined;

    constructor(data?: ItblMember) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.MemberID = _data["MemberID"];
            this.CreationDate = _data["CreationDate"] ? new Date(_data["CreationDate"].toString()) : <any>undefined;
            this.FirstName = _data["FirstName"];
            this.LastName = _data["LastName"];
            this.Email = _data["Email"];
            this.Username = _data["Username"];
            this.Password = _data["Password"];
            this.LastLoginDate = _data["LastLoginDate"] ? new Date(_data["LastLoginDate"].toString()) : <any>undefined;
            this.LoginsCount = _data["LoginsCount"];
            if (Array.isArray(_data["tblMemberRoleList"])) {
                this.tblMemberRoleList = [] as any;
                for (let item of _data["tblMemberRoleList"])
                    this.tblMemberRoleList!.push(tblMemberRole.fromJS(item));
            }
            if (Array.isArray(_data["tblRestaurantList"])) {
                this.tblRestaurantList = [] as any;
                for (let item of _data["tblRestaurantList"])
                    this.tblRestaurantList!.push(tblRestaurant.fromJS(item));
            }
            if (Array.isArray(_data["tblReviewList"])) {
                this.tblReviewList = [] as any;
                for (let item of _data["tblReviewList"])
                    this.tblReviewList!.push(tblReview.fromJS(item));
            }
            if (Array.isArray(_data["tblReviewReplyList"])) {
                this.tblReviewReplyList = [] as any;
                for (let item of _data["tblReviewReplyList"])
                    this.tblReviewReplyList!.push(tblReviewReply.fromJS(item));
            }
        }
    }

    static fromJS(data: any): tblMember {
        data = typeof data === 'object' ? data : {};
        let result = new tblMember();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MemberID"] = this.MemberID;
        data["CreationDate"] = this.CreationDate ? this.CreationDate.toISOString() : <any>undefined;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        data["Email"] = this.Email;
        data["Username"] = this.Username;
        data["Password"] = this.Password;
        data["LastLoginDate"] = this.LastLoginDate ? this.LastLoginDate.toISOString() : <any>undefined;
        data["LoginsCount"] = this.LoginsCount;
        if (Array.isArray(this.tblMemberRoleList)) {
            data["tblMemberRoleList"] = [];
            for (let item of this.tblMemberRoleList)
                data["tblMemberRoleList"].push(item.toJSON());
        }
        if (Array.isArray(this.tblRestaurantList)) {
            data["tblRestaurantList"] = [];
            for (let item of this.tblRestaurantList)
                data["tblRestaurantList"].push(item.toJSON());
        }
        if (Array.isArray(this.tblReviewList)) {
            data["tblReviewList"] = [];
            for (let item of this.tblReviewList)
                data["tblReviewList"].push(item.toJSON());
        }
        if (Array.isArray(this.tblReviewReplyList)) {
            data["tblReviewReplyList"] = [];
            for (let item of this.tblReviewReplyList)
                data["tblReviewReplyList"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ItblMember extends IEFCoreEntityBaseOftblMember {
    MemberID: number;
    CreationDate: Date;
    FirstName?: string | undefined;
    LastName?: string | undefined;
    Email?: string | undefined;
    Username?: string | undefined;
    Password?: string | undefined;
    LastLoginDate?: Date | undefined;
    LoginsCount: number;
    tblMemberRoleList?: tblMemberRole[] | undefined;
    tblRestaurantList?: tblRestaurant[] | undefined;
    tblReviewList?: tblReview[] | undefined;
    tblReviewReplyList?: tblReviewReply[] | undefined;
}

export abstract class EFCoreEntityBaseOftblRestaurant implements IEFCoreEntityBaseOftblRestaurant {

    constructor(data?: IEFCoreEntityBaseOftblRestaurant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EFCoreEntityBaseOftblRestaurant {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'EFCoreEntityBaseOftblRestaurant' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEFCoreEntityBaseOftblRestaurant {
}

export class tblRestaurant extends EFCoreEntityBaseOftblRestaurant implements ItblRestaurant {
    RestaurantID!: number;
    OwnerMemberID!: number;
    CreationDate!: Date;
    Name?: string | undefined;
    Address?: string | undefined;
    Description?: string | undefined;
    tblMember?: tblMember | undefined;
    tblReviewList?: tblReview[] | undefined;

    constructor(data?: ItblRestaurant) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.RestaurantID = _data["RestaurantID"];
            this.OwnerMemberID = _data["OwnerMemberID"];
            this.CreationDate = _data["CreationDate"] ? new Date(_data["CreationDate"].toString()) : <any>undefined;
            this.Name = _data["Name"];
            this.Address = _data["Address"];
            this.Description = _data["Description"];
            this.tblMember = _data["tblMember"] ? tblMember.fromJS(_data["tblMember"]) : <any>undefined;
            if (Array.isArray(_data["tblReviewList"])) {
                this.tblReviewList = [] as any;
                for (let item of _data["tblReviewList"])
                    this.tblReviewList!.push(tblReview.fromJS(item));
            }
        }
    }

    static fromJS(data: any): tblRestaurant {
        data = typeof data === 'object' ? data : {};
        let result = new tblRestaurant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RestaurantID"] = this.RestaurantID;
        data["OwnerMemberID"] = this.OwnerMemberID;
        data["CreationDate"] = this.CreationDate ? this.CreationDate.toISOString() : <any>undefined;
        data["Name"] = this.Name;
        data["Address"] = this.Address;
        data["Description"] = this.Description;
        data["tblMember"] = this.tblMember ? this.tblMember.toJSON() : <any>undefined;
        if (Array.isArray(this.tblReviewList)) {
            data["tblReviewList"] = [];
            for (let item of this.tblReviewList)
                data["tblReviewList"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ItblRestaurant extends IEFCoreEntityBaseOftblRestaurant {
    RestaurantID: number;
    OwnerMemberID: number;
    CreationDate: Date;
    Name?: string | undefined;
    Address?: string | undefined;
    Description?: string | undefined;
    tblMember?: tblMember | undefined;
    tblReviewList?: tblReview[] | undefined;
}

export abstract class EFCoreEntityBaseOftblReview implements IEFCoreEntityBaseOftblReview {

    constructor(data?: IEFCoreEntityBaseOftblReview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EFCoreEntityBaseOftblReview {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'EFCoreEntityBaseOftblReview' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEFCoreEntityBaseOftblReview {
}

export class tblReview extends EFCoreEntityBaseOftblReview implements ItblReview {
    ReviewID!: number;
    RestaurantID!: number;
    ReviewerMemberID!: number;
    CreationDate!: Date;
    RatingStars?: number | undefined;
    Comment?: string | undefined;
    tblMember?: tblMember | undefined;
    tblRestaurant?: tblRestaurant | undefined;
    tblReviewReply?: tblReviewReply | undefined;

    constructor(data?: ItblReview) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.ReviewID = _data["ReviewID"];
            this.RestaurantID = _data["RestaurantID"];
            this.ReviewerMemberID = _data["ReviewerMemberID"];
            this.CreationDate = _data["CreationDate"] ? new Date(_data["CreationDate"].toString()) : <any>undefined;
            this.RatingStars = _data["RatingStars"];
            this.Comment = _data["Comment"];
            this.tblMember = _data["tblMember"] ? tblMember.fromJS(_data["tblMember"]) : <any>undefined;
            this.tblRestaurant = _data["tblRestaurant"] ? tblRestaurant.fromJS(_data["tblRestaurant"]) : <any>undefined;
            this.tblReviewReply = _data["tblReviewReply"] ? tblReviewReply.fromJS(_data["tblReviewReply"]) : <any>undefined;
        }
    }

    static fromJS(data: any): tblReview {
        data = typeof data === 'object' ? data : {};
        let result = new tblReview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ReviewID"] = this.ReviewID;
        data["RestaurantID"] = this.RestaurantID;
        data["ReviewerMemberID"] = this.ReviewerMemberID;
        data["CreationDate"] = this.CreationDate ? this.CreationDate.toISOString() : <any>undefined;
        data["RatingStars"] = this.RatingStars;
        data["Comment"] = this.Comment;
        data["tblMember"] = this.tblMember ? this.tblMember.toJSON() : <any>undefined;
        data["tblRestaurant"] = this.tblRestaurant ? this.tblRestaurant.toJSON() : <any>undefined;
        data["tblReviewReply"] = this.tblReviewReply ? this.tblReviewReply.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ItblReview extends IEFCoreEntityBaseOftblReview {
    ReviewID: number;
    RestaurantID: number;
    ReviewerMemberID: number;
    CreationDate: Date;
    RatingStars?: number | undefined;
    Comment?: string | undefined;
    tblMember?: tblMember | undefined;
    tblRestaurant?: tblRestaurant | undefined;
    tblReviewReply?: tblReviewReply | undefined;
}

export abstract class EFCoreEntityBaseOftblReviewReply implements IEFCoreEntityBaseOftblReviewReply {

    constructor(data?: IEFCoreEntityBaseOftblReviewReply) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EFCoreEntityBaseOftblReviewReply {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'EFCoreEntityBaseOftblReviewReply' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEFCoreEntityBaseOftblReviewReply {
}

export class tblReviewReply extends EFCoreEntityBaseOftblReviewReply implements ItblReviewReply {
    ReviewID!: number;
    ReplyedMemberID!: number;
    CreationDate!: Date;
    ReplyText?: string | undefined;
    tblMember?: tblMember | undefined;
    tblReview?: tblReview | undefined;

    constructor(data?: ItblReviewReply) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.ReviewID = _data["ReviewID"];
            this.ReplyedMemberID = _data["ReplyedMemberID"];
            this.CreationDate = _data["CreationDate"] ? new Date(_data["CreationDate"].toString()) : <any>undefined;
            this.ReplyText = _data["ReplyText"];
            this.tblMember = _data["tblMember"] ? tblMember.fromJS(_data["tblMember"]) : <any>undefined;
            this.tblReview = _data["tblReview"] ? tblReview.fromJS(_data["tblReview"]) : <any>undefined;
        }
    }

    static fromJS(data: any): tblReviewReply {
        data = typeof data === 'object' ? data : {};
        let result = new tblReviewReply();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ReviewID"] = this.ReviewID;
        data["ReplyedMemberID"] = this.ReplyedMemberID;
        data["CreationDate"] = this.CreationDate ? this.CreationDate.toISOString() : <any>undefined;
        data["ReplyText"] = this.ReplyText;
        data["tblMember"] = this.tblMember ? this.tblMember.toJSON() : <any>undefined;
        data["tblReview"] = this.tblReview ? this.tblReview.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ItblReviewReply extends IEFCoreEntityBaseOftblReviewReply {
    ReviewID: number;
    ReplyedMemberID: number;
    CreationDate: Date;
    ReplyText?: string | undefined;
    tblMember?: tblMember | undefined;
    tblReview?: tblReview | undefined;
}

export class MembersResult implements IMembersResult {
    MemberID!: number;
    Email?: string | undefined;
    Username?: string | undefined;
    FirstName?: string | undefined;
    LastName?: string | undefined;
    Roles?: RoleItem[] | undefined;
    LoginsCount!: number;

    constructor(data?: IMembersResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.MemberID = _data["MemberID"];
            this.Email = _data["Email"];
            this.Username = _data["Username"];
            this.FirstName = _data["FirstName"];
            this.LastName = _data["LastName"];
            if (Array.isArray(_data["Roles"])) {
                this.Roles = [] as any;
                for (let item of _data["Roles"])
                    this.Roles!.push(RoleItem.fromJS(item));
            }
            this.LoginsCount = _data["LoginsCount"];
        }
    }

    static fromJS(data: any): MembersResult {
        data = typeof data === 'object' ? data : {};
        let result = new MembersResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MemberID"] = this.MemberID;
        data["Email"] = this.Email;
        data["Username"] = this.Username;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        if (Array.isArray(this.Roles)) {
            data["Roles"] = [];
            for (let item of this.Roles)
                data["Roles"].push(item.toJSON());
        }
        data["LoginsCount"] = this.LoginsCount;
        return data; 
    }
}

export interface IMembersResult {
    MemberID: number;
    Email?: string | undefined;
    Username?: string | undefined;
    FirstName?: string | undefined;
    LastName?: string | undefined;
    Roles?: RoleItem[] | undefined;
    LoginsCount: number;
}

export class RoleItem implements IRoleItem {
    RoleID!: number;
    RoleName?: string | undefined;
    IsAssigned!: boolean;

    constructor(data?: IRoleItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.RoleID = _data["RoleID"];
            this.RoleName = _data["RoleName"];
            this.IsAssigned = _data["IsAssigned"];
        }
    }

    static fromJS(data: any): RoleItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoleItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RoleID"] = this.RoleID;
        data["RoleName"] = this.RoleName;
        data["IsAssigned"] = this.IsAssigned;
        return data; 
    }
}

export interface IRoleItem {
    RoleID: number;
    RoleName?: string | undefined;
    IsAssigned: boolean;
}

export class RestaurantExtendedResult implements IRestaurantExtendedResult {
    RestaurantID!: number;
    Name?: string | undefined;
    Address?: string | undefined;
    Description?: string | undefined;
    AverageRating?: number | undefined;
    OwnerMemberID!: number;
    OwnerFullName?: string | undefined;
    ReviewsCount!: number;
    NewUnrepliedReviews!: number;

    constructor(data?: IRestaurantExtendedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.RestaurantID = _data["RestaurantID"];
            this.Name = _data["Name"];
            this.Address = _data["Address"];
            this.Description = _data["Description"];
            this.AverageRating = _data["AverageRating"];
            this.OwnerMemberID = _data["OwnerMemberID"];
            this.OwnerFullName = _data["OwnerFullName"];
            this.ReviewsCount = _data["ReviewsCount"];
            this.NewUnrepliedReviews = _data["NewUnrepliedReviews"];
        }
    }

    static fromJS(data: any): RestaurantExtendedResult {
        data = typeof data === 'object' ? data : {};
        let result = new RestaurantExtendedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RestaurantID"] = this.RestaurantID;
        data["Name"] = this.Name;
        data["Address"] = this.Address;
        data["Description"] = this.Description;
        data["AverageRating"] = this.AverageRating;
        data["OwnerMemberID"] = this.OwnerMemberID;
        data["OwnerFullName"] = this.OwnerFullName;
        data["ReviewsCount"] = this.ReviewsCount;
        data["NewUnrepliedReviews"] = this.NewUnrepliedReviews;
        return data; 
    }
}

export interface IRestaurantExtendedResult {
    RestaurantID: number;
    Name?: string | undefined;
    Address?: string | undefined;
    Description?: string | undefined;
    AverageRating?: number | undefined;
    OwnerMemberID: number;
    OwnerFullName?: string | undefined;
    ReviewsCount: number;
    NewUnrepliedReviews: number;
}

export class ReviewExtended implements IReviewExtended {
    RestaurantID!: number;
    ReviewID!: number;
    CreationDate!: Date;
    RatingStars?: number | undefined;
    Comment?: string | undefined;
    Reviever?: ReviewerMember | undefined;
    Replay?: ReviewReplay | undefined;

    constructor(data?: IReviewExtended) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.RestaurantID = _data["RestaurantID"];
            this.ReviewID = _data["ReviewID"];
            this.CreationDate = _data["CreationDate"] ? new Date(_data["CreationDate"].toString()) : <any>undefined;
            this.RatingStars = _data["RatingStars"];
            this.Comment = _data["Comment"];
            this.Reviever = _data["Reviever"] ? ReviewerMember.fromJS(_data["Reviever"]) : <any>undefined;
            this.Replay = _data["Replay"] ? ReviewReplay.fromJS(_data["Replay"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ReviewExtended {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewExtended();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RestaurantID"] = this.RestaurantID;
        data["ReviewID"] = this.ReviewID;
        data["CreationDate"] = this.CreationDate ? this.CreationDate.toISOString() : <any>undefined;
        data["RatingStars"] = this.RatingStars;
        data["Comment"] = this.Comment;
        data["Reviever"] = this.Reviever ? this.Reviever.toJSON() : <any>undefined;
        data["Replay"] = this.Replay ? this.Replay.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IReviewExtended {
    RestaurantID: number;
    ReviewID: number;
    CreationDate: Date;
    RatingStars?: number | undefined;
    Comment?: string | undefined;
    Reviever?: ReviewerMember | undefined;
    Replay?: ReviewReplay | undefined;
}

export class ReviewerMember implements IReviewerMember {
    MemberID!: number;
    FirstName?: string | undefined;
    LastName?: string | undefined;

    constructor(data?: IReviewerMember) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.MemberID = _data["MemberID"];
            this.FirstName = _data["FirstName"];
            this.LastName = _data["LastName"];
        }
    }

    static fromJS(data: any): ReviewerMember {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewerMember();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MemberID"] = this.MemberID;
        data["FirstName"] = this.FirstName;
        data["LastName"] = this.LastName;
        return data; 
    }
}

export interface IReviewerMember {
    MemberID: number;
    FirstName?: string | undefined;
    LastName?: string | undefined;
}

export class ReviewReplay implements IReviewReplay {
    Replyer?: ReviewerMember | undefined;
    CreationDate!: Date;
    ReplyText?: string | undefined;

    constructor(data?: IReviewReplay) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.Replyer = _data["Replyer"] ? ReviewerMember.fromJS(_data["Replyer"]) : <any>undefined;
            this.CreationDate = _data["CreationDate"] ? new Date(_data["CreationDate"].toString()) : <any>undefined;
            this.ReplyText = _data["ReplyText"];
        }
    }

    static fromJS(data: any): ReviewReplay {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewReplay();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Replyer"] = this.Replyer ? this.Replyer.toJSON() : <any>undefined;
        data["CreationDate"] = this.CreationDate ? this.CreationDate.toISOString() : <any>undefined;
        data["ReplyText"] = this.ReplyText;
        return data; 
    }
}

export interface IReviewReplay {
    Replyer?: ReviewerMember | undefined;
    CreationDate: Date;
    ReplyText?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

}